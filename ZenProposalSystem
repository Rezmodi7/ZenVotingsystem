// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract ZenProposalSystem {
    enum FormType {
        General,
        Cultural,
        Environmental,
        Survey,
        ZenBuilder,
        ZenQuest,
        ZenSupport,
        ZenEvent,
        ZenCollab,
        ZenEducation,
        ZenMarketing
    }

    struct Proposal {
        string name;
        string description;
        FormType formType;
        string extraData;
        uint256 voteCount;
        uint256 timestamp;
        address creator;
        uint256 likeCount;
        uint256 commentCount;
    }

    struct Comment {
        address commenter;
        string text;
        uint256 timestamp;
        bool edited;
        bool deleted;
    }

    Proposal[] public proposals;
    mapping(address => bool) public hasVoted;
    mapping(address => uint256) public lastProposalTime;
    mapping(address => uint256) public proposalCountByUser;
    mapping(uint256 => Comment[]) public proposalComments;
    mapping(uint256 => mapping(address => bool)) public hasLiked;
    mapping(address => uint256) public userPoints;

    address public owner;

    event ProposalCreated(address indexed creator, string name, uint256 index);
    event Voted(address indexed voter, uint256 proposalIndex);
    event ProposalLiked(address indexed liker, uint256 proposalIndex);
    event CommentAdded(address indexed commenter, uint256 proposalIndex, string text);
    event CommentEdited(address indexed editor, uint256 proposalIndex, uint256 commentIndex, string newText);
    event CommentDeleted(address indexed deleter, uint256 proposalIndex, uint256 commentIndex);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not authorized");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    // ✅ ثبت پیشنهاد با فرم آماده
    function createProposal(
        string memory name,
        string memory description,
        string memory extraData,
        uint8 formTypeId
    ) public {
        require(block.timestamp > lastProposalTime[msg.sender] + 6 * 60 * 60, "Wait 6 hours before posting again.");
        require(formTypeId <= uint8(FormType.ZenMarketing), "Invalid form type");

        lastProposalTime[msg.sender] = block.timestamp;

        proposals.push(Proposal({
            name: name,
            description: description,
            formType: FormType(formTypeId),
            extraData: extraData,
            voteCount: 0,
            timestamp: block.timestamp,
            creator: msg.sender,
            likeCount: 0,
            commentCount: 0
        }));

        proposalCountByUser[msg.sender]++;
        userPoints[msg.sender] += 5;

        emit ProposalCreated(msg.sender, name, proposals.length - 1);
    }

    // ✅ رأی دادن
    function vote(uint256 proposalIndex) public {
        require(!hasVoted[msg.sender], "Already voted");
        require(proposalIndex < proposals.length, "Invalid index");

        proposals[proposalIndex].voteCount++;
        hasVoted[msg.sender] = true;
        userPoints[msg.sender] += 2;

        emit Voted(msg.sender, proposalIndex);
    }

    // ✅ لایک
    function likeProposal(uint256 proposalIndex) public {
        require(proposalIndex < proposals.length, "Invalid index");
        require(!hasLiked[proposalIndex][msg.sender], "Already liked");

        proposals[proposalIndex].likeCount++;
        hasLiked[proposalIndex][msg.sender] = true;
        userPoints[msg.sender] += 1;
        userPoints[proposals[proposalIndex].creator] += 3;

        emit ProposalLiked(msg.sender, proposalIndex);
    }

    // ✅ کامنت
    function commentOnProposal(uint256 proposalIndex, string memory text) public {
        require(proposalIndex < proposals.length, "Invalid index");
        require(bytes(text).length > 0, "Empty comment");

        proposalComments[proposalIndex].push(Comment({
            commenter: msg.sender,
            text: text,
            timestamp: block.timestamp,
            edited: false,
            deleted: false
        }));

        proposals[proposalIndex].commentCount++;
        userPoints[msg.sender] += 2;
        userPoints[proposals[proposalIndex].creator] += 2;

        emit CommentAdded(msg.sender, proposalIndex, text);
    }

    // ✅ ویرایش کامنت
    function editComment(uint256 proposalIndex, uint256 commentIndex, string memory newText) public {
        require(proposalIndex < proposals.length, "Invalid proposal index");
        require(commentIndex < proposalComments[proposalIndex].length, "Invalid comment index");

        Comment storage c = proposalComments[proposalIndex][commentIndex];
        require(c.commenter == msg.sender, "Not your comment");
        require(!c.deleted, "Comment deleted");

        c.text = newText;
        c.edited = true;
        c.timestamp = block.timestamp;

        emit CommentEdited(msg.sender, proposalIndex, commentIndex, newText);
    }

    // ✅ حذف کامنت
    function deleteComment(uint256 proposalIndex, uint256 commentIndex) public {
        require(proposalIndex < proposals.length, "Invalid proposal index");
        require(commentIndex < proposalComments[proposalIndex].length, "Invalid comment index");

        Comment storage c = proposalComments[proposalIndex][commentIndex];
        require(c.commenter == msg.sender, "Not your comment");
        require(!c.deleted, "Already deleted");

        c.deleted = true;
        proposals[proposalIndex].commentCount--;

        emit CommentDeleted(msg.sender, proposalIndex, commentIndex);
    }

    // ✅ نمایش پیشنهاد خاص
    function getProposalDetails(uint256 index) public view returns (
        string memory name,
        string memory description,
        FormType formType,
        string memory extraData,
        uint256 voteCount,
        uint256 timestamp,
        address creator,
        uint256 likeCount,
        uint256 commentCount
    ) {
        require(index < proposals.length, "Invalid index");
        Proposal memory p = proposals[index];
        return (
            p.name,
            p.description,
            p.formType,
            p.extraData,
            p.voteCount,
            p.timestamp,
            p.creator,
            p.likeCount,
            p.commentCount
        );
    }

    // ✅ نمایش کامنت‌ها
    function getComments(uint256 proposalIndex) public view returns (Comment[] memory) {
        require(proposalIndex < proposals.length, "Invalid index");
        return proposalComments[proposalIndex];
    }

    // ✅ پیشنهادات یک کاربر خاص
    function getUserProposals(address user) public view returns (Proposal[] memory) {
        uint256 count = proposalCountByUser[user];
        Proposal[] memory result = new Proposal[](count);
        uint256 index = 0;

        for (uint256 i = 0; i < proposals.length; i++) {
            if (proposals[i].creator == user) {
                result[index] = proposals[i];
                index++;
            }
        }

        return result;
    }

    // ✅ جدیدترین پیشنهادات
    function getLatestProposals(uint256 limit) public view returns (Proposal[] memory) {
        uint256 total = proposals.length;
        uint256 count = limit > total ? total : limit;
        Proposal[] memory result = new Proposal[](count);

        for (uint256 i = 0; i < count; i++) {
            result[i] = proposals[total - 1 - i];
        }

        return result;
    }

    // ✅ اطلاعات عمومی
    function getProposalCount() public view returns (uint256) {
        return proposals.length;
    }

    function getUserPoints(address user) public view returns (uint256) {
        return userPoints[user];
    }

    function getUserProposalCount(address user) public view returns (uint256) {
        return proposalCountByUser[user];
    }
}
